{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_SearchBar = _resolveComponent(\"SearchBar\");\n  const _component_RecipeForm = _resolveComponent(\"RecipeForm\");\n  const _component_RecipeList = _resolveComponent(\"RecipeList\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_app = _resolveComponent(\"v-app\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" Application principale encadrée par Vuetify \"), _createVNode(_component_v_app, null, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createCommentVNode(\" Titre principal \"), _cache[2] || (_cache[2] = _createElementVNode(\"h1\", {\n        class: \"text-h4 mb-4\"\n      }, \"Gestionnaire de Recettes\", -1 /* HOISTED */)), _createCommentVNode(\" Barre de recherche pour filtrer les recettes par ingrédient \"), _createVNode(_component_SearchBar, {\n        onSearch: $options.handleSearch\n      }, null, 8 /* PROPS */, [\"onSearch\"]), _createCommentVNode(\" Formulaire pour ajouter ou modifier une recette\"), _createVNode(_component_RecipeForm, {\n        editData: $data.selectedRecipe,\n        onCreateRecipe: $options.createRecipe,\n        onUpdateRecipe: $options.updateRecipe,\n        onCancelEdit: _cache[0] || (_cache[0] = $event => $data.selectedRecipe = null)\n      }, null, 8 /* PROPS */, [\"editData\", \"onCreateRecipe\", \"onUpdateRecipe\"]), _createCommentVNode(\" Liste des recettes filtrées avec actions éditer et supprimer \"), _createVNode(_component_RecipeList, {\n        recipes: $options.filteredRecipes,\n        onEdit: _cache[1] || (_cache[1] = $event => $data.selectedRecipe = $event),\n        onDelete: $options.deleteRecipe\n      }, null, 8 /* PROPS */, [\"recipes\", \"onDelete\"]), _createCommentVNode(\" Ce sont ces méthodes createRecipe, updateRecipe, deleteRecipe qui appellent Axios vers Laravel.\")]),\n      _: 1 /* STABLE */,\n      __: [2]\n    })]),\n    _: 1 /* STABLE */\n  })], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */);\n}","map":{"version":3,"names":["_createCommentVNode","_createVNode","_component_v_app","_component_v_container","_createElementVNode","class","_component_SearchBar","onSearch","$options","handleSearch","_component_RecipeForm","editData","$data","selectedRecipe","onCreateRecipe","createRecipe","onUpdateRecipe","updateRecipe","onCancelEdit","_cache","$event","_component_RecipeList","recipes","filteredRecipes","onEdit","onDelete","deleteRecipe"],"sources":["/Users/belkabakouche/Desktop/laravel-vue/mon-projet-recettes/frontend/src/App.vue"],"sourcesContent":["<template>\n  <!-- Application principale encadrée par Vuetify -->\n  <v-app>\n    <v-container>\n      <!-- Titre principal -->\n      <h1 class=\"text-h4 mb-4\">Gestionnaire de Recettes</h1>\n\n      <!-- Barre de recherche pour filtrer les recettes par ingrédient -->\n      <SearchBar @search=\"handleSearch\"/>\n\n      <!-- Formulaire pour ajouter ou modifier une recette-->\n      <RecipeForm\n      :editData=\"selectedRecipe\"\n      @create-recipe=\"createRecipe\"\n      @update-recipe=\"updateRecipe\"\n      @cancel-edit=\"selectedRecipe = null\"\n      />\n\n      <!-- Liste des recettes filtrées avec actions éditer et supprimer -->\n      <RecipeList\n      :recipes=\"filteredRecipes\"\n      @edit=\"selectedRecipe = $event\"\n      @delete=\"deleteRecipe\" \n      />\n\n      <!-- Ce sont ces méthodes createRecipe, updateRecipe, deleteRecipe qui appellent Axios vers Laravel.-->\n\n    </v-container>\n  </v-app>\n  \n</template>\n\n<script>\n// Import duclient API configuré avec axios\nimport api from './services/api';\n// Import des composant enfants\nimport RecipeForm from './components/RecipeForm.vue';\nimport RecipeList from './components/RecipeList.vue';\nimport SearchBar from './components/SearchBar.vue';\n\nexport default {\n  components: { SearchBar, RecipeForm, RecipeList},\n  data() {\n    return {\n      recipes: [], // Stocke toutes les recettes récupérées depuis l'API\n      selectedRecipe: null, // Recette sélectionnée pour édition\n      filter: '', // Texte de filtre pour la recherche d'ingrédients'\n    };\n  },\n  computed: {\n    // Renvoie les recttes filtrées en fonction du texte recherché dans les ingrédients\n    filteredRecipes() {\n      if (!this.filter) return this.recipes;\n      return this.recipes.filter(r =>\n        r.ingredients.toLowerCase().includes(this.filter.toLocaleLowerCase())\n      );\n    },\n  },\n  // Dès que le composant est créé,on charge les recettes depuis l'API\n  created() {\n    this.fetchRecipes();\n  },\n  methods: {\n    // Récupère la liste des recettes depuis le backend\n    async fetchRecipes() {\n      try {\n        const url = this.filter\n        ? `/recipes?ingredient=${encodeURIComponent(this.filter)}`\n        : '/recipes';\n\n        const res = await api.get(url);\n        this.recipes = res.data; // On met à jour la liste locale avec les données reçues\n      } catch (err) {\n        console.error('Erreur lors du chargement des recettes', err);\n      }\n    },\n\n    // Crée une nouvelle recette en envoyant les données au backend\n    async createRecipe(newRecipe) {\n      try {\n        await api.post('/recipes', newRecipe);\n        this.fetchRecipes(); // Recharge la liste pour afficher la nouvelle recette\n        this.$toast.success('Recette ajoutée !')\n      } catch (err) {\n        this.$toast.error('Erreur pour ajouter la recette')\n        console.error('Erreur lors de la création', err);\n      }\n    },\n\n    // Met à jour une recette existante via son ID\n    async updateRecipe(updatedRecipe) {\n      try {\n        await api.put(`/recipes/${updatedRecipe.id}`, updatedRecipe);\n        this.selectedRecipe = null; // On vide la recette sélectionnée (fin édition)\n        this.fetchRecipes(); // Recharge la liste pour afficher la mise à jour\n      } catch (err) {\n        console.error('Erreur lors de la modification', err);\n      }\n    },\n\n    // Supprime une recette après confirmation\n    async deleteRecipe(id) {\n      if (!confirm('Supprimer cette recette ?')) return; // Annule si non confirmé\n      try {\n        await api.delete(`/recipes/${id}`);\n        this.fetchRecipes(); // Recharge la liste après suppression\n      } catch (err) {\n        console.error('Erreur lors de la suppression', err);\n      }\n    },\n    // Met à jour le filtre de recherche quand l'utilisateur tape dans la barrede recherche'\n    handleSearch(value) {\n      this.filter = value;\n      this.fetchRecipes(); // nouvelle requête filtrée\n    },\n  },\n};\n\n\n\n</script>\n\n\n"],"mappings":";;;;;;;6DACEA,mBAAA,iDAAoD,EACpDC,YAAA,CA0BQC,gBAAA;sBAzBN,MAwBc,CAxBdD,YAAA,CAwBcE,sBAAA;wBAvBZ,MAAwB,CAAxBH,mBAAA,qBAAwB,E,0BACxBI,mBAAA,CAAsD;QAAlDC,KAAK,EAAC;MAAc,GAAC,0BAAwB,sBAEjDL,mBAAA,iEAAoE,EACpEC,YAAA,CAAmCK,oBAAA;QAAvBC,QAAM,EAAEC,QAAA,CAAAC;MAAY,uCAEhCT,mBAAA,oDAAuD,EACvDC,YAAA,CAKES,qBAAA;QAJDC,QAAQ,EAAEC,KAAA,CAAAC,cAAc;QACxBC,cAAa,EAAEN,QAAA,CAAAO,YAAY;QAC3BC,cAAa,EAAER,QAAA,CAAAS,YAAY;QAC3BC,YAAW,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAER,KAAA,CAAAC,cAAc;iFAG5Bb,mBAAA,kEAAqE,EACrEC,YAAA,CAIEoB,qBAAA;QAHDC,OAAO,EAAEd,QAAA,CAAAe,eAAe;QACxBC,MAAI,EAAAL,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAER,KAAA,CAAAC,cAAc,GAAGO,MAAM;QAC7BK,QAAM,EAAEjB,QAAA,CAAAkB;wDAGT1B,mBAAA,oGAAuG,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}