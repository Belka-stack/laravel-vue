{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n// Import duclient API configuré avec axios\nimport api from './services/api';\n// Import des composant enfants\nimport RecipeForm from './components/RecipeForm.vue';\nimport RecipeList from './components/RecipeList.vue';\nimport SearchBar from './components/SearchBar.vue';\nexport default {\n  components: {\n    SearchBar,\n    RecipeForm,\n    RecipeList\n  },\n  data() {\n    return {\n      recipes: [],\n      // Stocke toutes les recettes récupérées depuis l'API\n      selectedRecipe: null,\n      // Recette sélectionnée pour édition\n      filter: '' // Texte de filtre pour la recherche d'ingrédients'\n    };\n  },\n  computed: {\n    // Renvoie les recttes filtrées en fonction du texte recherché dans les ingrédients\n    filteredRecipes() {\n      if (!this.filter) return this.recipes;\n      return this.recipes.filter(r => r.ingredient.toLowerCase().includes(this.filter.toLocaleLowerCase()));\n    }\n  },\n  // Dès que le composant est créé,on charge les recettes depuis l'API\n  created() {\n    this.fetchRecipes();\n  },\n  methods: {\n    // Récupère la liste des recettes depuis le backend\n    async fetchRecipes() {\n      try {\n        const url = this.filter ? `/recipes?ingredient=${encodeURIComponent(this.filter)}` : '/recipes';\n        const res = await api.get(url);\n        this.recipes = res.data; // On met à jour la liste locale avec les données reçues\n      } catch (err) {\n        console.error('Erreur lors du chargement des recettes', err);\n      }\n    },\n    // Crée une nouvelle recette en envoyant les données au backend\n    async createRecipe(newRecipe) {\n      try {\n        await api.post('/recipes', newRecipe);\n        this.fetchRecipes(); // Recharge la liste pour afficher la nouvelle recette\n        this.$toast.success('Recette ajoutée !');\n      } catch (err) {\n        this.$toast.error('Erreur pour ajouter la recette');\n        console.error('Erreur lors de la création', err);\n      }\n    },\n    // Met à jour une recette existante via son ID\n    async updateRecipe(updatedRecipe) {\n      try {\n        await api.put(`/recipes/${updatedRecipe.id}`, updatedRecipe);\n        this.selectedRecipe = null; // On vide la recette sélectionnée (fin édition)\n        this.fetchRecipes(); // Recharge la liste pour afficher la mise à jour\n      } catch (err) {\n        console.error('Erreur lors de la modification', err);\n      }\n    },\n    // Supprime une recette après confirmation\n    async deleteRecipe(id) {\n      if (!confirm('Supprimer cette recette ?')) return; // Annule si non confirmé\n      try {\n        await api.delete(`/recipes/${id}`);\n        this.fetchRecipes(); // Recharge la liste après suppression\n      } catch (err) {\n        console.error('Erreur lors de la suppression', err);\n      }\n    },\n    // Met à jour le filtre de recherche quand l'utilisateur tape dans la barrede recherche'\n    handleSearch(value) {\n      this.filter = value;\n      this.fetchRecipes(); // nouvelle requête filtrée\n    }\n  }\n};","map":{"version":3,"names":["api","RecipeForm","RecipeList","SearchBar","components","data","recipes","selectedRecipe","filter","computed","filteredRecipes","r","ingredient","toLowerCase","includes","toLocaleLowerCase","created","fetchRecipes","methods","url","encodeURIComponent","res","get","err","console","error","createRecipe","newRecipe","post","$toast","success","updateRecipe","updatedRecipe","put","id","deleteRecipe","confirm","delete","handleSearch","value"],"sources":["/Users/belkabakouche/Desktop/laravel-vue/mon-projet-recettes/frontend/src/App.vue"],"sourcesContent":["<template>\n  <!-- Application principale encadrée par Vuetify -->\n  <v-app>\n    <v-container>\n      <!-- Titre principal -->\n      <h1 class=\"text-h4 mb-4\">Gestionnaire de Recettes</h1>\n\n      <!-- Barre de recherche pour filtrer les recettes par ingrédient -->\n      <SearchBar @search=\"handleSearch\"/>\n\n      <!-- Formulaire pour ajouter ou modifier une recette-->\n      <RecipeForm\n      :editData=\"selectedRecipe\"\n      @create-recipe=\"createRecipe\"\n      @update-recipe=\"updateRecipe\"\n      @cancel-edit=\"selectedRecipe = null\"\n      />\n\n      <!-- Liste des recettes filtrées avec actions éditer et supprimer -->\n      <RecipeList\n      :recipes=\"filteredRecipes\"\n      @edit=\"selectedRecipe = $event\"\n      @delete=\"deleteRecipe\" \n      />\n\n      <!-- Ce sont ces méthodes createRecipe, updateRecipe, deleteRecipe qui appellent Axios vers Laravel.-->\n\n    </v-container>\n  </v-app>\n  \n</template>\n\n<script>\n// Import duclient API configuré avec axios\nimport api from './services/api';\n// Import des composant enfants\nimport RecipeForm from './components/RecipeForm.vue';\nimport RecipeList from './components/RecipeList.vue';\nimport SearchBar from './components/SearchBar.vue';\n\nexport default {\n  components: { SearchBar, RecipeForm, RecipeList},\n  data() {\n    return {\n      recipes: [], // Stocke toutes les recettes récupérées depuis l'API\n      selectedRecipe: null, // Recette sélectionnée pour édition\n      filter: '', // Texte de filtre pour la recherche d'ingrédients'\n    };\n  },\n  computed: {\n    // Renvoie les recttes filtrées en fonction du texte recherché dans les ingrédients\n    filteredRecipes() {\n      if (!this.filter) return this.recipes;\n      return this.recipes.filter(r =>\n        r.ingredient.toLowerCase().includes(this.filter.toLocaleLowerCase())\n      );\n    },\n  },\n  // Dès que le composant est créé,on charge les recettes depuis l'API\n  created() {\n    this.fetchRecipes();\n  },\n  methods: {\n    // Récupère la liste des recettes depuis le backend\n    async fetchRecipes() {\n      try {\n        const url = this.filter\n        ? `/recipes?ingredient=${encodeURIComponent(this.filter)}`\n        : '/recipes';\n\n        const res = await api.get(url);\n        this.recipes = res.data; // On met à jour la liste locale avec les données reçues\n      } catch (err) {\n        console.error('Erreur lors du chargement des recettes', err);\n      }\n    },\n\n    // Crée une nouvelle recette en envoyant les données au backend\n    async createRecipe(newRecipe) {\n      try {\n        await api.post('/recipes', newRecipe);\n        this.fetchRecipes(); // Recharge la liste pour afficher la nouvelle recette\n        this.$toast.success('Recette ajoutée !')\n      } catch (err) {\n        this.$toast.error('Erreur pour ajouter la recette')\n        console.error('Erreur lors de la création', err);\n      }\n    },\n\n    // Met à jour une recette existante via son ID\n    async updateRecipe(updatedRecipe) {\n      try {\n        await api.put(`/recipes/${updatedRecipe.id}`, updatedRecipe);\n        this.selectedRecipe = null; // On vide la recette sélectionnée (fin édition)\n        this.fetchRecipes(); // Recharge la liste pour afficher la mise à jour\n      } catch (err) {\n        console.error('Erreur lors de la modification', err);\n      }\n    },\n\n    // Supprime une recette après confirmation\n    async deleteRecipe(id) {\n      if (!confirm('Supprimer cette recette ?')) return; // Annule si non confirmé\n      try {\n        await api.delete(`/recipes/${id}`);\n        this.fetchRecipes(); // Recharge la liste après suppression\n      } catch (err) {\n        console.error('Erreur lors de la suppression', err);\n      }\n    },\n    // Met à jour le filtre de recherche quand l'utilisateur tape dans la barrede recherche'\n    handleSearch(value) {\n      this.filter = value;\n      this.fetchRecipes(); // nouvelle requête filtrée\n    },\n  },\n};\n\n\n\n</script>\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}